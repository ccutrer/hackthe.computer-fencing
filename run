#!/usr/bin/env ruby

require 'rexml/document'
require 'set'
#require 'byebug'

file = $stdin
#file = File.open('example2')

data = file.readlines.join("")

raw_xml, raw_points = data.split("\n\n")

xml = REXML::Document.new(raw_xml)
path = nil
xml.elements.each('/svg/path') { |n| path = n.attributes['d'] if n.attributes['id'] == 'compound' }

points = raw_points.split("\n").map { |x| x.split(', ').map(&:to_f) }

polygon = []

DIGIT = %w{0 1 2 3 4 5 6 7 8 9}.to_set

def parse_num(stuff, index)
  length = 0
  if stuff[index] == '+' || stuff[index] == '-'
    length += 1
  end
  while (DIGIT.include?(stuff[index + length]))
    length += 1
  end
  if stuff[index + length] == '.'
    length += 1
    while (DIGIT.include?(stuff[index + length]))
      length += 1
    end
  end
  if stuff[index + length] == 'e' || stuff[index + length] == 'E'
    length += 1
    if stuff[index + length] == '+' || stuff[index + length] == '-'
      length += 1
    end
    while (DIGIT.include?(stuff[index + length]))
      length += 1
    end
  end

  [stuff.slice(index, length).to_f, length]
end

SPACE = ["\r", "\n", "\t", " ", ","].to_set
def eat_space(stuff, index)
  count = 0
  while(SPACE.include?(stuff[index + count]))
    count += 1
  end
  count
end

def read_coordinate(path, i)
  i += eat_space(path, i)
  x, j = parse_num(path, i)
  i += j
  i += eat_space(path, i)
  [x, i]
end

def read_coordinates(path, i)
  i += eat_space(path, i)
  x, j = parse_num(path, i)
  i += j
  i += eat_space(path, i)
  y, j = parse_num(path, i)
  i += j
  i += eat_space(path, i)
  [x, y, i]
end

i = 0
last_command = nil
while i < path.length
  if path[i] == 'M' || path[i] == 'm'
    last_command = path[i]
    i += 1
    x, y, i = read_coordinates(path, i)
    polygon << [x, y]
  elsif path[i] == 'L' || path[i] == 'l'
    last_command = path[i]
    i += 1
    x, y, i = read_coordinates(path, i)
    if last_command == 'l'
      x += polygon.last.first
      y += polygon.last.last
    end
    polygon << [x, y]
  elsif path[i] == 'H' || path[i] == 'h'
    last_command = path[i]
    i += 1
    x, i = read_coordinate(path, i)
    if last_command == 'h'
      x += polygon.last.first
    end
    polygon << [x, polygon.last.last]
  elsif path[i] == 'V' || path[i] == 'v'
    last_command = path[i]
    i += 1
    y, i = read_coordinate(path, i)
    if last_command == 'v'
      y += polygon.last.last
    end
    polygon << [polygon.last.first, y]
  elsif path[i] == 'Z' || path[i] == 'z'
    i += 1
    polygon << polygon.first
  elsif last_command == 'L' || last_command == 'l'
    x, y, i = read_coordinates(path, i)
    if last_command == 'l'
      x += polygon.last.first
      y += polygon.last.last
    end
    polygon << [x, y]
  elsif last_command == 'H' || last_command == 'h'
    x, i = read_coordinates(path, i)
    if last_command == 'h'
      x += polygon.last.first
    end
    polygon << [x, polygon.last.last]
  elsif last_command == 'V' || last_command == 'v'
    y, i = read_coordinates(path, i)
    if last_command == 'v'
      y += polygon.last.last
    end
    polygon << [polygon.last.first, y]
  else
    sleep 10
    exit 1
  end
end

sleep 5 if polygon[3][1] == polygon[4][1]

E = 0.000000001

def ray_intersects_segment(source, segment)
  a, b = segment
  if source[1] == a[1] || source[1] == b[1]
    source = source.dup
    source[1] += E
  end

  if source[1] < a[1] || source[1] > b[1]
    false
  elsif source.first > segment[2]
    false
  else
    if source.first < segment[3]
      true
    else
      if a.first != b.first
        m_red = (b[1] - a[1])/(b.first - a.first)
      else
        m_red = Float::INFINITY
      end
      if a.first != source.first then
        m_blue = (source[1] - a[1])/(source.first - a.first)
      else
        m_blue = Float::INFINITY
      end
      m_blue >= m_red
    end
  end
end

segments = []
polygon.each_with_index do |point2, i|
  next if i == 0
  point1 = polygon[i - 1]
  segment = [point1, point2].sort_by(&:last)
  xes = segment.map(&:first)
  segment << xes.max
  segment << xes.min
  segments << segment
end

points.each do |point|
  if polygon.any? { |p| p == point }
    puts true
    next
  end
  if segments.any? { |segment| segment.first[1] == segment[1][1] && segment.first[1] == point[1] && point.first >= segment.first[0] && point.first <= segment[1].first }
    puts true
    next
  end
  intersections = 0
  segments.each do |segment|
    intersections += 1 if ray_intersects_segment(point, segment)
  end

  puts (intersections % 2 == 1)
end
